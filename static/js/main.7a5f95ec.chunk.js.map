{"version":3,"sources":["components/LiveChart/LiveChart.js","components/MonitoringTable/MonitoringTable.js","App.js","reportWebVitals.js","index.js"],"names":["LiveChart","state","chartOptions","chart","type","title","text","time","useUTC","xAxis","tickPixelInterval","yAxis","plotLines","value","width","color","series","data","this","props","cityAqi","seriesData","aqis","map","d","x","moment","lastUpdated","unix","y","Number","aqi","highcharts","Highcharts","options","cityName","name","React","Component","client","W3CWebSocket","MonitoringTable","chartData","historicalCityAqis","onopen","console","log","onmessage","message","updatedAqiForCities","JSON","parse","length","tempState","currentAqiForCity","staleAqiForCity","find","staleAqi","city","parseFloat","toFixed","toISOString","updatedCityData","Object","assign","push","newCityAqiToAdd","setState","className","Table","bordered","hover","index","onClick","loadChart","getAqiRenderColor","fromNow","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a5f95ec.chunk.js","sourcesContent":["import React from 'react';\r\nimport moment from 'moment';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\n\r\n\r\nexport default class LiveChart extends React.Component {\r\n    state = {\r\n        chartOptions: {\r\n            chart: {\r\n                type: 'spline'\r\n            },\r\n            title: {\r\n                text: 'AQI For City'\r\n            },\r\n            time: {\r\n                useUTC: false\r\n            },\r\n            xAxis: {\r\n                title: {\r\n                    text: 'Time'\r\n                },\r\n                type: 'datetime',\r\n                tickPixelInterval: 150\r\n            },\r\n            yAxis: {\r\n                title: {\r\n                    text: 'AQI'\r\n                },\r\n                plotLines: [{\r\n                    value: 0,\r\n                    width: 1,\r\n                    color: '#808080'\r\n                }]\r\n            },\r\n            series: [{\r\n                data: []\r\n            }\r\n            ]\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.props.cityAqi) {\r\n            const seriesData = this.props.cityAqi.aqis.map((d) => {\r\n                return {\r\n                    x: moment(d.lastUpdated).unix(),\r\n                    y:Number(d.aqi)\r\n                };\r\n            })\r\n            return <div >\r\n                <HighchartsReact highcharts={Highcharts} options={{\r\n                    ...this.state.chartOptions, \r\n                    ...{\r\n                        title: {\r\n                            text: 'AQI For ' + this.props.cityAqi.cityName\r\n                        }\r\n                    },\r\n                    series: [{ name: `AQI For ${this.props.cityAqi.cityName}`, data: seriesData}]\r\n                }} />\r\n            </div>\r\n        }\r\n        return <div></div>\r\n\r\n\r\n    }\r\n}","import React from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\r\nimport moment from 'moment';\r\nimport LiveChart from '../LiveChart/LiveChart';\r\n\r\nconst client = new W3CWebSocket('ws://city-ws.herokuapp.com');\r\n\r\nexport default class MonitoringTable extends React.Component {\r\n    state = { aqi: [], chartData: null, historicalCityAqis: {} }\r\n    componentDidMount() {\r\n        client.onopen = () => {\r\n            console.log('WebSocket Client Connected');\r\n        };\r\n        client.onmessage = (message) => {\r\n            const updatedAqiForCities = JSON.parse(message.data || '[]');\r\n            if (updatedAqiForCities.length) {\r\n                const tempState = { aqi: this.state.aqi, historicalCityAqis: this.state.historicalCityAqis };\r\n                updatedAqiForCities.map((currentAqiForCity) => {\r\n                    const staleAqiForCity = tempState.aqi.find((staleAqi) => { return staleAqi.city === currentAqiForCity.city });\r\n                    if (staleAqiForCity) {\r\n                        // updating the same object by reference\r\n                        staleAqiForCity.city = currentAqiForCity.city;\r\n                        staleAqiForCity.aqi = parseFloat(currentAqiForCity.aqi).toFixed(2);\r\n                        staleAqiForCity.lastUpdated = moment().toISOString();\r\n                        \r\n                        // inserting a new copy to historical data array for graph\r\n                        const updatedCityData = Object.assign({}, staleAqiForCity);\r\n                        tempState.historicalCityAqis[currentAqiForCity.city].push(updatedCityData);\r\n                        return null;\r\n                    }\r\n                    const newCityAqiToAdd = { ...currentAqiForCity, lastUpdated: moment().toISOString(), aqi: parseFloat(currentAqiForCity.aqi).toFixed(2) }\r\n                    tempState.aqi.push(newCityAqiToAdd);\r\n                    tempState.historicalCityAqis[newCityAqiToAdd.city] = [Object.assign({}, newCityAqiToAdd)];\r\n                    return null;\r\n                })\r\n                this.setState({ ...tempState })\r\n            }\r\n        };\r\n    }\r\n    getAqiRenderColor(aqi) {\r\n        if (aqi < 50) {\r\n            return 'aqi-good';\r\n        }\r\n        if (aqi < 100) {\r\n            return 'aqi-satisfactory';\r\n        }\r\n        if (aqi < 200) {\r\n            return 'aqi-moderate';\r\n        }\r\n        if (aqi < 300) {\r\n            return 'aqi-poor';\r\n        }\r\n        if (aqi < 400) {\r\n            return 'aqi-very-poor';\r\n        }\r\n        if (aqi < 500) {\r\n            return 'aqi-severe';\r\n        }\r\n    }\r\n    loadChart(data) {\r\n        this.setState({ chartData: {cityName: data.city, aqis:this.state.historicalCityAqis[data.city]} });\r\n    }\r\n    render() {\r\n        return <div className='row'>\r\n            <div className='col-lg-4 col'>\r\n                <h6 className='text-center'> Click on any city to see AQI live. </h6>\r\n                <Table bordered hover>\r\n                <thead>\r\n                    <tr>\r\n                        <th>City</th>\r\n                        <th>Current AQI</th>\r\n                        <th>Last Updated</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.state.aqi.map((data, index) => {\r\n                        return <tr onClick={() => { this.loadChart(data) }} key={`aqi-city-${index}-${data.city}`}>\r\n                            <td ><b>{data.city}</b></td>\r\n                            <td className={this.getAqiRenderColor(data.aqi)}><b>{data.aqi}</b></td>\r\n                            <td className='last-updated'>{moment(data.lastUpdated).fromNow()}</td>\r\n                        </tr>\r\n                    })}\r\n\r\n                </tbody>\r\n            </Table>\r\n            </div>\r\n            <div className='col-lg-8 col'>{this.state.chartData && <LiveChart cityAqi={this.state.chartData} />}</div>\r\n        </div>\r\n    }\r\n}","\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport MonitoringTable from './components/MonitoringTable/MonitoringTable'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"container-fluid mt-4\">\n        <MonitoringTable/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}